package org.mybatis.generator.extend.plugins;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.extend.constant.GeneratorConstant;
import org.mybatis.generator.extend.util.GeneratorUtil;
import org.mybatis.generator.internal.util.StringUtility;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

/**
 * 修改生成的Model，让其继承BaseModel
 *
 * Created by Bob Jiang on 2017/2/13.
 */
public class BaseModelGeneratorPlugin extends PluginAdapter {

    public boolean validate(List<String> list) {
        String modelTargetPackage = this.properties.getProperty("modelTargetPackage");
        return StringUtility.stringHasValue(modelTargetPackage);
    }

    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        FullyQualifiedJavaType pkType = !primaryKeyColumns.isEmpty() ?
                primaryKeyColumns.get(0).getFullyQualifiedJavaType() :
                new FullyQualifiedJavaType("java.lang.String");

        FullyQualifiedJavaType superClazzType = new FullyQualifiedJavaType(GeneratorConstant.BASE_MODEL_CLASS_PATH);
        topLevelClass.addImportedType(superClazzType);

        superClazzType.addTypeArgument(pkType);
        topLevelClass.setSuperClass(superClazzType);
        clearPrimaryKeyColums(topLevelClass, primaryKeyColumns);

        topLevelClass.addJavaDocLine("/**");
        topLevelClass.addJavaDocLine("* Model: " + topLevelClass.getType().getShortName());
        topLevelClass.addJavaDocLine("* Table: " + introspectedTable.getFullyQualifiedTable().getIntrospectedTableName());
        topLevelClass.addJavaDocLine("* Alias: " + introspectedTable.getFullyQualifiedTable().getAlias());
        topLevelClass.addJavaDocLine("*");
        topLevelClass.addJavaDocLine("* This Model generated by MyBatis Generator Extend at " + GeneratorUtil.now());
        topLevelClass.addJavaDocLine("*/");
        return super.modelBaseRecordClassGenerated(topLevelClass, introspectedTable);
    }

    /**
     * 去除子类中主键属性
     *
     * @param topLevelClass
     * @param primaryKeyColumns
     */
    private void clearPrimaryKeyColums(TopLevelClass topLevelClass, List<IntrospectedColumn> primaryKeyColumns) {
        if (primaryKeyColumns.isEmpty()) {
            return;
        }

        List<Field> fields = topLevelClass.getFields();
        Iterator<Field> fieldsIterator = fields.iterator();
        HashSet<Field> pkFields = new HashSet<Field>();

        List<Method> methods = topLevelClass.getMethods();
        Iterator<Method> methodsIterator = methods.iterator();
        HashSet<Method> pkMethods = new HashSet<Method>();

        while (fieldsIterator.hasNext()) {
            Field field = fieldsIterator.next();
            for (IntrospectedColumn column : primaryKeyColumns) {
                if (field.getName().equals(column.getActualColumnName())) {
                    pkFields.add(field);
                }
            }
        }
        fields.removeAll(pkFields);

        while (methodsIterator.hasNext()) {
            Method method = methodsIterator.next();
            for (IntrospectedColumn column : primaryKeyColumns) {
                String setter = "set" + GeneratorUtil.convertFieldName(column.getActualColumnName());
                String getter = "get" + GeneratorUtil.convertFieldName(column.getActualColumnName());
                if (method.getName().equals(setter) || method.getName().equals(getter)) {
                    pkMethods.add(method);
                }
            }
        }
        methods.removeAll(pkMethods);
    }
}
