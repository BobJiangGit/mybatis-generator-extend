package org.mybatis.generator.extend.plugins;

import org.mybatis.generator.api.*;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.exception.ShellException;
import org.mybatis.generator.extend.constant.GeneratorConstant;
import org.mybatis.generator.extend.util.GeneratorUtil;
import org.mybatis.generator.internal.DefaultShellCallback;
import org.mybatis.generator.internal.util.StringUtility;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * 生成继承自GenericMapper的Mapper接口
 *
 * Created by Bob Jiang on 2017/2/13.
 */
public class GenericServiceImplGeneratorPlugin extends PluginAdapter {

    private String serviceTargetDir;
    private String serviceTargetPackageImpl;
    private String mapperTargetPackage;

    private ShellCallback shellCallback = null;

    public GenericServiceImplGeneratorPlugin() {
        this.shellCallback = new DefaultShellCallback(false);
    }

    public boolean validate(List<String> list) {
        String serviceTargetDir = this.properties.getProperty("serviceTargetDir");
        this.serviceTargetDir = serviceTargetDir;
        String serviceTargetPackage = this.properties.getProperty("serviceTargetPackage");
        this.serviceTargetPackageImpl = serviceTargetPackage;
        String mapperTargetPackage = this.properties.getProperty("mapperTargetPackage");
        this.mapperTargetPackage = mapperTargetPackage;
        return StringUtility.stringHasValue(serviceTargetDir) && StringUtility.stringHasValue(serviceTargetPackage);
    }

    public List<GeneratedJavaFile> contextGenerateAdditionalJavaFiles(IntrospectedTable introspectedTable) {
        ArrayList<GeneratedJavaFile> mapperJavaFiles = new ArrayList<GeneratedJavaFile>();
        JavaFormatter javaFormatter = this.context.getJavaFormatter();

        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        FullyQualifiedJavaType pkType = !primaryKeyColumns.isEmpty() ?
                primaryKeyColumns.get(0).getFullyQualifiedJavaType() :
                new FullyQualifiedJavaType("java.lang.String");

        String packageName = introspectedTable.getFullyQualifiedTable().getSubPackage(true);

        Iterator<GeneratedJavaFile> javaFilesIterator = introspectedTable.getGeneratedJavaFiles().iterator();
        while (javaFilesIterator.hasNext()) {
            GeneratedJavaFile javaFile = javaFilesIterator.next();
            CompilationUnit unit = javaFile.getCompilationUnit();
            FullyQualifiedJavaType modelJavaType = unit.getType();
            String shortName = modelJavaType.getShortName();
            if(!shortName.endsWith("Example")) {
                String serviceName = shortName + "ServiceImpl";
                TopLevelClass serviceImplClass = new TopLevelClass(this.serviceTargetPackageImpl + packageName + ".impl." + serviceName);
                serviceImplClass.setVisibility(JavaVisibility.PUBLIC);
                serviceImplClass.addImportedType(modelJavaType);

                serviceImplClass.addJavaDocLine("/**");
                serviceImplClass.addJavaDocLine("* ServiceImpl: " + serviceName);
                serviceImplClass.addJavaDocLine("* Mapper : " + shortName + "Mapper");
                serviceImplClass.addJavaDocLine("* Model  : " + shortName);
                serviceImplClass.addJavaDocLine("*");
                serviceImplClass.addJavaDocLine("* This ServiceImpl generated by MyBatis Generator Extend at " + GeneratorUtil.now());
                serviceImplClass.addJavaDocLine("*/");

                FullyQualifiedJavaType autowired = new FullyQualifiedJavaType("org.springframework.beans.factory.annotation.Autowired");
                FullyQualifiedJavaType service = new FullyQualifiedJavaType("org.springframework.stereotype.Service");
                serviceImplClass.addImportedType(autowired);
                serviceImplClass.addImportedType(service);

                FullyQualifiedJavaType mapperType = new FullyQualifiedJavaType(mapperTargetPackage + packageName + "." + shortName + "Mapper");
                serviceImplClass.addImportedType(mapperType);

                FullyQualifiedJavaType genericMapperType = new FullyQualifiedJavaType(GeneratorConstant.GENERIC_MAPPER_CLASS_PATH);
                serviceImplClass.addImportedType(genericMapperType);

                serviceImplClass.addAnnotation("@Service");

                Field mapperField = new Field();
                mapperField.setType(mapperType);
                mapperField.setName(shortName + "Mapper");
                mapperField.setVisibility(JavaVisibility.PRIVATE);
                mapperField.addAnnotation("@Autowired");
                serviceImplClass.addField(mapperField);

                Method mapperMethod = new Method();
                mapperMethod.setName("getGenericMapper");
                mapperMethod.setVisibility(JavaVisibility.PUBLIC);
                mapperMethod.addAnnotation("@Override");
                genericMapperType.addTypeArgument(modelJavaType);
                genericMapperType.addTypeArgument(pkType);
                mapperMethod.setReturnType(genericMapperType);
                mapperMethod.addBodyLine("return " + mapperField.getName() + ";");
                serviceImplClass.addMethod(mapperMethod);

                FullyQualifiedJavaType superImplType = new FullyQualifiedJavaType(GeneratorConstant.GENERIC_SERVICE_IMPL_CLASS_PATH);
                serviceImplClass.addImportedType(superImplType);
                superImplType.addTypeArgument(modelJavaType);
                superImplType.addTypeArgument(pkType);
                serviceImplClass.setSuperClass(superImplType);

                try {
                    GeneratedJavaFile file = new GeneratedJavaFile(serviceImplClass, this.serviceTargetDir, javaFormatter);
                    File mapperDir = this.shellCallback.getDirectory(this.serviceTargetDir, this.serviceTargetPackageImpl + packageName + ".impl");
                    File mapperFile = new File(mapperDir, file.getFileName());
                    if(!mapperFile.exists()) {
                        mapperJavaFiles.add(file);
                    }
                } catch (ShellException e) {
                    e.printStackTrace();
                }
            }
        }
        return mapperJavaFiles;
    }

}
